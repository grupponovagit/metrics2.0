<x-admin.wrapper :containerless="true">
    <x-slot name="title">{{ $prospetto->nome }}</x-slot>
    
    {{-- Header --}}
    <div class="bg-gradient-to-r from-purple-600 via-indigo-600 to-blue-600 text-white py-8 px-6 shadow-lg rounded-xl mb-6">
        <div class="max-w-7xl mx-auto">
            <div class="flex items-center justify-between flex-wrap gap-4">
                <div>
                    <h1 class="text-3xl font-bold mb-2 flex items-center gap-3">
                        <x-ui.icon name="chart-line" class="h-8 w-8" />
                        {{ $prospetto->nome }}
                    </h1>
                    <p class="text-purple-100 text-sm">
                        {{ $prospetto->descrizione ?? 'Analisi e previsioni per Google Ads' }}
                    </p>
                </div>
                <div class="text-right">
                    <div class="text-sm text-purple-200">Ultimo aggiornamento</div>
                    <div class="text-lg font-semibold">{{ $prospetto->updated_at->locale('it')->translatedFormat('d F Y') }}</div>
                </div>
            </div>
        </div>
    </div>
    
    {{-- Azioni --}}
    <div class="flex gap-2 mb-6 justify-end">
        <a href="{{ route('admin.marketing.prospetto_mensile.index') }}" class="btn btn-outline btn-info gap-2">
            <x-ui.icon name="arrow-left" class="h-4 w-4" />
            Torna alla Lista
        </a>
        <a href="{{ route('admin.marketing.prospetto_mensile.edit', $prospetto->id) }}" class="btn btn-warning gap-2">
            <x-ui.icon name="edit" class="h-4 w-4" />
            Modifica
        </a>
    </div>
    
    <div class="max-w-7xl mx-auto">
        
        {{-- Scenario Description --}}
        @if($prospetto->descrizione)
        <x-admin.card tone="light" shadow="lg" padding="lg" class="mb-8">
            <div class="flex items-start gap-4">
                <div class="bg-purple-100 dark:bg-purple-900/30 rounded-lg p-3">
                    <x-ui.icon name="rocket" class="text-purple-600 dark:text-purple-400 text-2xl h-8 w-8" />
                </div>
                <div class="flex-1">
                    <h2 class="text-2xl font-bold text-base-content mb-3 flex items-center gap-3">
                        Scenario — {{ $prospetto->descrizione }}
                        <span class="badge badge-success gap-2 text-xs">
                            <x-ui.icon name="check" class="h-3 w-3" />
                            Ottimizzato
                        </span>
                    </h2>
                </div>
            </div>
        </x-admin.card>
        @endif
        
        {{-- Filters --}}
        <x-admin.card tone="light" shadow="lg" padding="lg" class="mb-8">
            <div class="flex items-center justify-between mb-4">
                <h3 class="text-lg font-bold text-base-content flex items-center gap-2">
                    <x-ui.icon name="filter" class="h-5 w-5" />
                    Filtra per Account Google Ads
                </h3>
                <button onclick="resetFilters()" class="text-sm text-purple-600 hover:text-purple-800 font-semibold flex items-center gap-2">
                    <x-ui.icon name="redo" class="h-4 w-4" />
                    Reset Filtri
                </button>
            </div>
            <div id="filterButtons" class="flex flex-wrap gap-3">
                <!-- Buttons will be generated by JS -->
            </div>
        </x-admin.card>
        
        {{-- Stats Cards --}}
        <div id="monthlyBudgetCard" class="mb-6">
            <!-- Budget mensile sarà generato qui -->
        </div>
        
        <div id="statsContainer" class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
            <!-- Stats will be generated by JS -->
        </div>
        
        {{-- Data Table --}}
        <x-admin.card tone="light" shadow="lg" padding="none">
            <div class="px-6 py-4 border-b border-base-300 bg-gradient-to-r from-purple-50 to-blue-50 dark:from-purple-900/20 dark:to-blue-900/20">
                <h3 class="text-lg font-bold text-base-content flex items-center gap-2">
                    <x-ui.icon name="table" class="h-5 w-5" />
                    Dettaglio Settimanale per Account
                </h3>
                <p class="text-sm text-base-content/60 mt-1" id="accountInfo">Seleziona un account per vedere i dettagli</p>
            </div>
            <div class="overflow-x-auto">
                <table class="table w-full" id="dataTable">
                    <thead class="bg-base-200">
                        <tr>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="calendar-week" class="h-4 w-4 inline mr-2" />
                                Settimana
                            </th>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="percentage" class="h-4 w-4 inline mr-2" />
                                Incremento Budget
                            </th>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="euro-sign" class="h-4 w-4 inline mr-2" />
                                Budget Medio Giornaliero
                            </th>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="chart-line" class="h-4 w-4 inline mr-2" />
                                CPL Atteso
                            </th>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="user-check" class="h-4 w-4 inline mr-2" />
                                Lead Stimati/Giorno
                            </th>
                            <th class="px-6 py-4 text-left text-xs font-semibold text-base-content uppercase tracking-wider">
                                <x-ui.icon name="users" class="h-4 w-4 inline mr-2" />
                                Lead Settimanali
                            </th>
                        </tr>
                    </thead>
                    <tbody id="tableBody" class="divide-y divide-base-300">
                        <!-- Rows will be generated by JS -->
                    </tbody>
                </table>
            </div>
        </x-admin.card>
        
    </div>
    
    <style>
        .card-hover {
            transition: all 0.3s ease;
        }
        
        .card-hover:hover {
            transform: translateY(-5px);
            box-shadow: 0 20px 25px -5px rgb(0 0 0 / 0.1), 0 8px 10px -6px rgb(0 0 0 / 0.1);
        }
        
        .table-row:hover {
            background-color: oklch(var(--b2));
        }
        
        .filter-button {
            transition: all 0.2s;
        }
        
        .filter-button:hover {
            transform: scale(1.05);
        }
        
        .filter-button.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }
    </style>
    
    <script>
        // Data JSON dal database
        const campaignData = {!! json_encode($prospetto->dati_accounts) !!};
        
        // Calcola automaticamente i lead per ogni settimana
        if (campaignData && campaignData.accounts) {
            campaignData.accounts.forEach(account => {
                if (account.weeks) {
                    account.weeks.forEach(week => {
                        week.leads = Math.round((week.budget / week.cpl) * 10) / 10; // Lead/giorno arrotondati
                    });
                }
            });
        }
        
        let selectedAccountId = null;
        
        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            if (campaignData && campaignData.accounts) {
                generateFilterButtons();
                showAllAccounts();
            } else {
                document.getElementById('statsContainer').innerHTML = '<div class="col-span-4 text-center text-error">Errore: Dati non validi</div>';
            }
        });
        
        function generateFilterButtons() {
            const container = document.getElementById('filterButtons');
            container.innerHTML = '';
            
            // All accounts button
            const allBtn = document.createElement('button');
            allBtn.className = 'filter-button active px-6 py-3 rounded-lg font-semibold bg-base-200 text-base-content shadow-sm';
            allBtn.innerHTML = '<i class="fas fa-th mr-2"></i>Tutti gli Account';
            allBtn.onclick = () => filterByAccount(null);
            container.appendChild(allBtn);
            
            // Individual account buttons
            campaignData.accounts.forEach(account => {
                const btn = document.createElement('button');
                btn.className = 'filter-button px-6 py-3 rounded-lg font-semibold bg-base-100 text-base-content shadow-sm border-2 border-base-300';
                btn.innerHTML = `<i class="fas ${account.icon || 'fa-chart-line'} mr-2"></i>${account.code}`;
                btn.onclick = () => filterByAccount(account.id);
                btn.dataset.accountId = account.id;
                container.appendChild(btn);
            });
        }
        
        function filterByAccount(accountId) {
            selectedAccountId = accountId;
            
            // Update button states
            const buttons = document.querySelectorAll('.filter-button');
            buttons.forEach(btn => {
                btn.classList.remove('active');
                btn.classList.add('bg-base-100', 'border-2', 'border-base-300');
                btn.classList.remove('text-white');
            });
            
            if (accountId === null) {
                buttons[0].classList.add('active');
                buttons[0].classList.remove('bg-base-100', 'border-2', 'border-base-300');
                showAllAccounts();
            } else {
                const activeBtn = document.querySelector(`[data-account-id="${accountId}"]`);
                activeBtn.classList.add('active');
                activeBtn.classList.remove('bg-base-100', 'border-2', 'border-base-300');
                activeBtn.classList.add('text-white');
                showSingleAccount(accountId);
            }
        }
        
        function resetFilters() {
            filterByAccount(null);
        }
        
        function showAllAccounts() {
            document.getElementById('accountInfo').textContent = 'Visualizzazione aggregata di tutti gli account';
            
            const totalStats = calculateTotalStats();
            renderMonthlyBudget();
            renderStatsCards(totalStats);
            renderAggregatedTable();
        }
        
        function showSingleAccount(accountId) {
            const account = campaignData.accounts.find(a => a.id === accountId);
            document.getElementById('accountInfo').textContent = `Account: ${account.name} (${account.code})`;
            
            const accountStats = calculateAccountStats(account);
            renderMonthlyBudgetForAccount(account);
            renderStatsCards(accountStats);
            renderAccountTable(account);
        }
        
        function renderMonthlyBudget() {
            const container = document.getElementById('monthlyBudgetCard');
            
            // Calcola il budget mensile totale escludendo week 0 (partenza)
            let totalDailyBudget = 0;
            campaignData.accounts.forEach(account => {
                if (account.weeks && account.weeks.length > 0) {
                    // Filtra solo le settimane >= 1 (esclude week 0)
                    const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
                    
                    if (effectiveWeeks.length > 0) {
                        const lastWeek = effectiveWeeks[effectiveWeeks.length - 1];
                        totalDailyBudget += lastWeek.budget;
                    } else {
                        // Se non ci sono settimane effettive, usa l'ultima disponibile
                        const lastWeek = account.weeks[account.weeks.length - 1];
                        totalDailyBudget += lastWeek.budget;
                    }
                }
            });
            
            const monthlyBudget = totalDailyBudget * 30;
            
            container.innerHTML = `
                <div class="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl shadow-2xl p-8 text-white card-hover">
                    <div class="flex items-center justify-between flex-wrap gap-4">
                        <div class="flex-1">
                            <div class="flex items-center mb-3 gap-4">
                                <div class="bg-white bg-opacity-20 rounded-lg p-3">
                                    <i class="fas fa-calendar-alt text-4xl"></i>
                                </div>
                                <div>
                                    <h3 class="text-lg font-semibold opacity-90">Budget Mensile Totale ({{ \Carbon\Carbon::createFromDate($prospetto->anno, $prospetto->mese, 1)->locale('it')->translatedFormat('F') }})</h3>
                                    <p class="text-sm opacity-75">Tutti gli account Google Ads</p>
                                </div>
                            </div>
                            <div class="text-5xl font-bold mb-2">€ ${monthlyBudget.toLocaleString('it-IT')}</div>
                            <div class="flex items-center text-sm opacity-90">
                                <i class="fas fa-info-circle mr-2"></i>
                                <span>Budget giornaliero: € ${totalDailyBudget.toLocaleString('it-IT')} × 30 giorni</span>
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="bg-white bg-opacity-20 rounded-xl p-4">
                                <i class="fas fa-chart-pie text-6xl opacity-80"></i>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function renderMonthlyBudgetForAccount(account) {
            const container = document.getElementById('monthlyBudgetCard');
            
            // Filtra solo le settimane >= 1 (esclude week 0)
            const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
            let lastWeek;
            
            if (effectiveWeeks.length > 0) {
                lastWeek = effectiveWeeks[effectiveWeeks.length - 1];
            } else {
                // Se non ci sono settimane effettive, usa l'ultima disponibile
                lastWeek = account.weeks[account.weeks.length - 1];
            }
            
            const monthlyBudget = lastWeek.budget * 30;
            
            container.innerHTML = `
                <div class="bg-gradient-to-r from-indigo-600 via-purple-600 to-pink-600 rounded-2xl shadow-2xl p-8 text-white card-hover">
                    <div class="flex items-center justify-between flex-wrap gap-4">
                        <div class="flex-1">
                            <div class="flex items-center mb-3 gap-4">
                                <div class="bg-white bg-opacity-20 rounded-lg p-3">
                                    <i class="fas ${account.icon || 'fa-chart-line'} text-4xl"></i>
                                </div>
                                <div>
                                    <h3 class="text-lg font-semibold opacity-90">Budget Mensile ({{ \Carbon\Carbon::createFromDate($prospetto->anno, $prospetto->mese, 1)->locale('it')->translatedFormat('F') }})</h3>
                                    <p class="text-sm opacity-75">${account.name}</p>
                                </div>
                            </div>
                            <div class="text-5xl font-bold mb-2">€ ${monthlyBudget.toLocaleString('it-IT')}</div>
                            <div class="flex items-center text-sm opacity-90">
                                <i class="fas fa-info-circle mr-2"></i>
                                <span>Budget giornaliero: € ${lastWeek.budget.toLocaleString('it-IT')} × 30 giorni</span>
                            </div>
                        </div>
                        <div class="text-right">
                            <div class="bg-white bg-opacity-20 rounded-xl p-4">
                                <i class="fas fa-calendar-check text-6xl opacity-80"></i>
                            </div>
                        </div>
                    </div>
                </div>
            `;
        }
        
        function calculateTotalStats() {
            let totalBudget = 0;
            let totalLeads = 0;
            let avgCPL = 0;
            
            campaignData.accounts.forEach(account => {
                if (account.weeks && account.weeks.length > 0) {
                    // Filtra solo le settimane >= 1 (esclude week 0)
                    const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
                    
                    let lastWeek;
                    if (effectiveWeeks.length > 0) {
                        lastWeek = effectiveWeeks[effectiveWeeks.length - 1];
                    } else {
                        lastWeek = account.weeks[account.weeks.length - 1];
                    }
                    
                    totalBudget += lastWeek.budget;
                    totalLeads += lastWeek.leads;
                }
            });
            
            avgCPL = totalLeads > 0 ? totalBudget / totalLeads : 0;
            
            return {
                budget: totalBudget,
                leads: totalLeads,
                cpl: avgCPL,
                accounts: campaignData.accounts.length
            };
        }
        
        function calculateAccountStats(account) {
            if (!account.weeks || account.weeks.length === 0) {
                return { budget: 0, leads: 0, cpl: 0, budgetGrowth: 0, leadsGrowth: 0 };
            }
            
            // Filtra solo le settimane >= 1 (esclude week 0)
            const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
            
            let lastWeek;
            if (effectiveWeeks.length > 0) {
                lastWeek = effectiveWeeks[effectiveWeeks.length - 1];
            } else {
                lastWeek = account.weeks[account.weeks.length - 1];
            }
            
            const firstWeek = account.weeks[0];
            
            const budgetGrowth = firstWeek.budget !== 0 ? ((lastWeek.budget - firstWeek.budget) / firstWeek.budget * 100).toFixed(1) : 0;
            const leadsGrowth = firstWeek.leads !== 0 ? ((lastWeek.leads - firstWeek.leads) / firstWeek.leads * 100).toFixed(1) : 0;
            
            return {
                budget: lastWeek.budget,
                leads: lastWeek.leads,
                cpl: lastWeek.cpl,
                budgetGrowth: budgetGrowth,
                leadsGrowth: leadsGrowth
            };
        }
        
        function renderStatsCards(stats) {
            const container = document.getElementById('statsContainer');
            
            if (selectedAccountId === null) {
                // Calcola i lead mensili sommando i lead settimanali (week 1-4) per tutti gli account
                // 6 giorni lavorativi a settimana
                let monthlyLeads = 0;
                campaignData.accounts.forEach(account => {
                    if (account.weeks && account.weeks.length > 0) {
                        // Filtra settimane >= 1 e somma i lead settimanali
                        const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
                        effectiveWeeks.forEach(week => {
                            monthlyLeads += week.leads * 6; // lead/giorno * 6 giorni lavorativi
                        });
                    }
                });
                
                container.innerHTML = `
                    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-euro-sign text-3xl opacity-80"></i>
                            <span class="text-sm bg-blue-400 px-2 py-1 rounded">Totale</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">€ ${stats.budget.toLocaleString('it-IT')}</div>
                        <div class="text-blue-100 text-sm">Budget Giornaliero</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-user-check text-3xl opacity-80"></i>
                            <span class="text-sm bg-green-400 px-2 py-1 rounded">Giornalieri</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">${stats.leads.toFixed(1)}</div>
                        <div class="text-green-100 text-sm">Lead al Giorno</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-chart-line text-3xl opacity-80"></i>
                            <span class="text-sm bg-purple-400 px-2 py-1 rounded">Medio</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">€ ${stats.cpl.toFixed(2)}</div>
                        <div class="text-purple-100 text-sm">CPL Medio</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-users text-3xl opacity-80"></i>
                            <span class="text-sm bg-orange-400 px-2 py-1 rounded">Mensili</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">${Math.round(monthlyLeads).toLocaleString('it-IT')}</div>
                        <div class="text-orange-100 text-sm">Lead Mese</div>
                    </div>
                `;
            } else {
                // Calcola i lead mensili per singolo account sommando le settimane >= 1
                // 6 giorni lavorativi a settimana
                const account = campaignData.accounts.find(a => a.id === selectedAccountId);
                let monthlyLeads = 0;
                if (account && account.weeks) {
                    const effectiveWeeks = account.weeks.filter(w => w.week >= 1);
                    effectiveWeeks.forEach(week => {
                        monthlyLeads += week.leads * 6; // lead/giorno * 6 giorni lavorativi
                    });
                }
                
                container.innerHTML = `
                    <div class="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-euro-sign text-3xl opacity-80"></i>
                            <span class="text-sm bg-blue-400 px-2 py-1 rounded">+${stats.budgetGrowth}%</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">€ ${stats.budget.toLocaleString('it-IT')}</div>
                        <div class="text-blue-100 text-sm">Budget Giornaliero</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-green-500 to-green-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-user-check text-3xl opacity-80"></i>
                            <span class="text-sm bg-green-400 px-2 py-1 rounded">+${stats.leadsGrowth}%</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">${stats.leads.toFixed(1)}</div>
                        <div class="text-green-100 text-sm">Lead al Giorno</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-chart-line text-3xl opacity-80"></i>
                            <span class="text-sm bg-purple-400 px-2 py-1 rounded">Ottimale</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">€ ${stats.cpl.toFixed(2)}</div>
                        <div class="text-purple-100 text-sm">CPL Finale</div>
                    </div>
                    
                    <div class="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl shadow-lg p-6 text-white card-hover">
                        <div class="flex items-center justify-between mb-2">
                            <i class="fas fa-users text-3xl opacity-80"></i>
                            <span class="text-sm bg-orange-400 px-2 py-1 rounded">Mensili</span>
                        </div>
                        <div class="text-3xl font-bold mb-1">${Math.round(monthlyLeads).toLocaleString('it-IT')}</div>
                        <div class="text-orange-100 text-sm">Lead Mese</div>
                    </div>
                `;
            }
        }
        
        function renderAccountTable(account) {
            const tbody = document.getElementById('tableBody');
            tbody.innerHTML = '';
            
            if (!account.weeks || account.weeks.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center py-8 text-base-content/60">Nessun dato disponibile</td></tr>';
                return;
            }
            
            account.weeks.forEach((week, index) => {
                const row = document.createElement('tr');
                row.className = 'table-row';
                
                const incrementClass = week.increment.includes('+') ? 'text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400' : 
                                      week.increment === '0%' ? 'text-gray-600 bg-gray-50 dark:bg-gray-700/20 dark:text-gray-400' : 
                                      'text-blue-600 bg-blue-50 dark:bg-blue-900/20 dark:text-blue-400';
                
                const weekLabel = week.week === 0 ? 'Partenza' : `Settimana ${week.week}`;
                const weekNumber = week.week === 0 ? '0' : week.week;
                const weeklyLeads = Math.round(week.leads * 6); // 6 giorni lavorativi
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full flex items-center justify-center" style="background-color: ${account.color}20;">
                                <span class="font-bold" style="color: ${account.color};">${weekNumber}</span>
                            </div>
                            <span class="ml-3 text-sm font-medium text-base-content">${weekLabel}</span>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${incrementClass}">
                            ${week.increment}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-base-content">
                        € ${week.budget.toLocaleString('it-IT')}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-semibold text-base-content">
                        € ${week.cpl.toFixed(2)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <span class="text-sm font-semibold text-base-content">${week.leads.toFixed(1)}</span>
                            <div class="ml-3 w-24 bg-base-300 rounded-full h-2">
                                <div class="bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full" style="width: ${Math.min((week.leads / 700 * 100), 100)}%"></div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="text-sm font-bold text-success">${weeklyLeads.toLocaleString('it-IT')}</span>
                        <span class="text-xs text-base-content/60 ml-1">lead</span>
                    </td>
                `;
                
                tbody.appendChild(row);
            });
        }
        
        function renderAggregatedTable() {
            const tbody = document.getElementById('tableBody');
            tbody.innerHTML = '';
            
            if (!campaignData.accounts || campaignData.accounts.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center py-8 text-base-content/60">Nessun dato disponibile</td></tr>';
                return;
            }
            
            // Trova il numero massimo di settimane
            const maxWeeks = Math.max(...campaignData.accounts.map(a => a.weeks ? a.weeks.length : 0));
            
            // Aggregate data by week
            for (let weekIndex = 0; weekIndex < maxWeeks; weekIndex++) {
                let totalBudget = 0;
                let totalLeads = 0;
                let avgCPL = 0;
                let increment = '';
                let weekNum = null;
                let accountsCount = 0;
                
                campaignData.accounts.forEach(account => {
                    if (account.weeks && account.weeks[weekIndex]) {
                        const week = account.weeks[weekIndex];
                        totalBudget += week.budget;
                        totalLeads += week.leads;
                        increment = week.increment;
                        weekNum = week.week;
                        accountsCount++;
                    }
                });
                
                avgCPL = totalLeads > 0 ? totalBudget / totalLeads : 0;
                const weeklyLeads = Math.round(totalLeads * 6); // 6 giorni lavorativi
                
                const row = document.createElement('tr');
                row.className = 'table-row';
                
                const incrementClass = increment.includes('+') ? 'text-green-600 bg-green-50 dark:bg-green-900/20 dark:text-green-400' : 
                                      increment === '0%' ? 'text-gray-600 bg-gray-50 dark:bg-gray-700/20 dark:text-gray-400' : 
                                      'text-blue-600 bg-blue-50 dark:bg-blue-900/20 dark:text-blue-400';
                
                const weekLabel = weekNum === 0 ? 'Partenza' : `Settimana ${weekNum}`;
                const weekNumber = weekNum === 0 ? '0' : weekNum;
                
                row.innerHTML = `
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <div class="w-10 h-10 rounded-full bg-gradient-to-br from-purple-100 to-blue-100 dark:from-purple-900/30 dark:to-blue-900/30 flex items-center justify-center">
                                <span class="font-bold text-purple-600 dark:text-purple-400">${weekNumber}</span>
                            </div>
                            <span class="ml-3 text-sm font-medium text-base-content">${weekLabel}</span>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="px-3 py-1 inline-flex text-sm leading-5 font-semibold rounded-full ${incrementClass}">
                            ${increment}
                        </span>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-bold text-base-content">
                        € ${totalBudget.toLocaleString('it-IT')}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap text-sm font-bold text-base-content">
                        € ${avgCPL.toFixed(2)}
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <div class="flex items-center">
                            <span class="text-sm font-bold text-base-content">${totalLeads.toFixed(1)}</span>
                            <div class="ml-3 w-24 bg-base-300 rounded-full h-2">
                                <div class="bg-gradient-to-r from-purple-500 to-blue-500 h-2 rounded-full" style="width: ${Math.min((totalLeads / 800 * 100), 100)}%"></div>
                            </div>
                        </div>
                    </td>
                    <td class="px-6 py-4 whitespace-nowrap">
                        <span class="text-sm font-bold text-success">${weeklyLeads.toLocaleString('it-IT')}</span>
                        <span class="text-xs text-base-content/60 ml-1">lead</span>
                    </td>
                `;
                
                tbody.appendChild(row);
            }
        }
    </script>
    
</x-admin.wrapper>

